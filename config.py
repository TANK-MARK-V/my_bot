from users import make_user, find_user
from logs import do_log as log


with open("data/token.txt", 'r', encoding="UTF-8") as file:
    BOT_TOKEN = file.readline()  # Токен бота

COMMANDS = {
    "__names__": ["lolgen", "add_word", "get_words",
                  "sti", "evo", "atom",
                  "encode", "decode", "cancel",
                  "verbs", "valent", "random"],
    

    "lolgen": ['Предложение из случайных слов по заданной схеме',
               'Схема задаётся после команды через пробел:',
               '    "lolgen *схема*"', 
               'Ключевые слова:',
               '    "сущ" - использовать в схеме имя существительное;',
               '    "прил" - использовать в схеме имя прилагательное;',
               '    "глаг" - использовать в схеме глагол;',
               'Слова, помимо ключевых, изменяться не будут',
               'Указав схему хоть раз, можно использовать команду неограниченное количество раз, создавая предложение по той же схеме',
               'Символы "меньше" и "больше" удаляются из схемы (из-за правил вывода сообщений в чат)'],
    "add_word": ['Добавить слово в базу данных lolgen, указав его часть речи',
             'Слово и часть речи задаются после команды через пробел, разделяются пробелом:',
             '  "word *слово* *часть речи*"',
             'Чтобы указать часть речи, нужно написать укороченный вариант ("сущ", "прил" и "глаг" соответственно для имени существительного, имени прилагательного и глагола)'],
    "get_words": ['Посмотреть все слова из базы данных lolgen',],

    "sti": ['Заполнить таблицу истинности',
            'Логическое выражение задаётся после команды через пробел:',
            '   "sti *логическое выражение*"',
            'Логическое выражение может включать до 4 переменных - "x", "y", "z", "w" - в строгом порядке использования (нельзя добавлять переменную, не используя предыдущую)',
            'Переменные и действия нужно отделять друг от друга хотя бы одним пробелом'],
    "evo": ['Решить задание с исполнителем (23 задание ЕГЭ по информатике на момент написания кода)',
            'Может решить большинство заданий с обязазательным или/и избегаемым этапом (не важно, избегать нужно цифру, или число)',
            'Поддерживает условие, когда одна команда не может повторяться больше двух раз подряд',
            'Чтобы ввести несколько чисел, нужно разделить их пробелом'],
    "atom": ['Решить задачу по физике',
             'Просто введи команду и следуй инструкциям'],

    "encode": ['Закодировать введённые сообщения',
               'Символы "меньше" и "больше" удаляются из схемы (из-за правил вывода сообщений в чат)',
               'Чтобы начать/закончить зашифровку сообщений, введите команду'],
    "decode": ['Раскодировать введённые сообщения',
               'Символы "меньше" и "больше" удаляются из схемы (из-за правил вывода сообщений в чат)',
               'Чтобы начать/закончить расшифровку сообщений, введите команду'],
    "cancel": ['Остановить выполнение команды',
               'Например, сбор информации atom или декодирование decode',],
    
    "verbs": ['Неправильные глагоы',
              'Можете подтянуть знания при помощи удобного распределения глаголов и их форм и тут же проверить свои знания, соревнуясь с другими пользователями'],
    "valent": ['Получить валентинку',],

    "random": ['Рандомайзер',
               'Можно указать до трёх чисел:',
               '    "random" - 0 или 1',
               '    "random n" - случайное число от 1 до n включительно',
               '    "random s n" - случайное число от s до n включительно',
               '    "random s n m" - m случайных чисел от s до n'],



    "__admin_names__": ["logs", "errors", "users", "chat", "ban", "data"],


    "logs": ['Посмотреть сегодняшние логи указанного пользователя',
             'username или Id пользователя указывается после команды:',
             '    "logs *username или Id пользователя*"',
             'Можно получить логи по дате, указанной по формату "гг-мм.дд" через пробел от username-а или Id пользователя:',
             '    "logs *username или Id пользователя* *дата*"'],
    "errors": ['Посмотреть сегодняшние ошибки указанного пользователя',
               'username или Id пользователя указывается после команды:',
               '    "errors *username или Id пользователя*"',
               'Можно получить ошибки по дате, указанной по формату "гг-мм.дд" через пробел от username-а или Id пользователя:',
               '    "errors *username или Id пользователя* *дата*"'],

    "users": ['Получить полный список пользователей',
              'Список состоит из Id, username-а и уровня прав администратора пользователя, написанными через " ~~~ "'],
    "chat": ['Написать пользователю сообщение',
            'username или Id пользователя и сообщение задаются после команды через пробел, разделяются пробелом:',
            '    "chat *username или Id пользователя* *сообщение*"',
            'Символы "меньше" и "больше" удаляются из схемы (из-за правил вывода сообщений в чат)'],

    "ban": ['Заблокировать пользователя по его Id или username',],
    "data": ['Редактировать базу данных',
             'Чтобы внести изменения в список неправильных глаголов, нужно вводить их через "_", разделяя формы при помощи "-"',
             'Чтобы изменить информацию о пользователе, нужно вводить название колонки и новое значение через ": ", каждое изменение вводится с новой строки',
             'Чтобы удалить слова в базе данных lolgen, нужно ввести слово']
    

}


LEVELS = {
    "logs": 4,
    "errors": 4,
    "users": 4,
    "chat": 4,
    "ban": 5,
    "data": 5
}

SHORTS = """info - Подробное описание всех команд
lolgen - Предложение из случайных слов
add_word - Добавить слово, указав его часть речи
get_words - Посмотреть все слова из базы данных lolgen
sti - Заполнить таблицу истинности
evo - Решить задание с исполнителем
atom - Решить задачу по физике
encode - Закодировать текст
decode - Раскодировать текст
cancel - Остановить выполнение команды
verbs - Неправильные глаголы
valentine - Получить валентинку
random - Рандомайзер
"""


def info(command):
    if command in COMMANDS.keys():
        return '\n'.join(COMMANDS[command])


async def autorisation(bot, msg=None, callback=None, need=1) -> bool:
    info = msg if msg else (callback if callback else None)
    if not info:
        return None
    result = make_user(info)
    
    if result:
        await log(info, result, bot)

    result = find_user(info.from_user.id)
    
    if result["access"] >= need:
        return True
    
    answer = msg if msg else callback.message
    if need == 1:
        await log(info, ('Пользователь был заблокирован',), bot)
        if result["access"] == 0:
            await answer.answer('Вы были заблокированы' + (("\n" + result["ban"]) if result["ban"] != "None" else ""))
            return False
        else:
            await answer.answer('Произошла ошибка авторизации')
            return False
    
    await log(info, (f'Пользователь обладает правами доступа уровня {result["access"]}, нужен {need}',), bot)
    await answer.answer('Вы не обладаете нужными правами доступа')
    return False